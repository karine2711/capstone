package com.aua.museum.booking.service.impl;import com.aua.museum.booking.domain.Event;import com.aua.museum.booking.domain.EventType;import com.aua.museum.booking.domain.User;import com.aua.museum.booking.service.DownloadService;import com.aua.museum.booking.service.EventService;import com.aua.museum.booking.service.EventTypeService;import com.aua.museum.booking.service.UserService;import jakarta.servlet.http.HttpServletRequest;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Spy;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.MessageSource;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import static org.junit.Assert.assertNotNull;import static org.mockito.ArgumentMatchers.*;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;;@SpringBootTest@ExtendWith(MockitoExtension.class)class DownloadServiceImplTest {    @Mock    private UserService userService;    @Mock    private EventService eventService;    @Mock    private MessageSource messageSource;    private DownloadService downloadService;    @Mock    private EventTypeService eventTypeService;    @Mock    private HttpServletRequest request;    @BeforeEach    void setup() {        downloadService = new DownloadServiceImpl(userService, eventService, messageSource, eventTypeService);    }    @Test    void shouldReturnEventsForDownloading() {        given(userService.getUserByUsername(anyString())).willReturn(new User());        given(eventService.findByDateBetween(any(), any(), anyList())).willReturn(new ArrayList<>());        given(request.getParameter(anyString())).willReturn("10-10-2020", "10-11-2020", "individuals", "students");        List<Event> eventsForDownloading = downloadService.getEventsForDownloading("username", request);        verify(request, times(4)).getParameter(anyString());        assertNotNull(eventsForDownloading);    }    @Test    void shouldReturnListOfAppropriateEventTypesDependingOnInput() {        List<String> input = Arrays.asList("preschool,elementary,middle,high,students,individuals,event".split(","));        List<EventType> actualList = downloadService.extractEventTypes(input);        assertNotNull(actualList);    }}