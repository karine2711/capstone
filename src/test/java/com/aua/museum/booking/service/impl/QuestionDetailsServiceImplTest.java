package com.aua.museum.booking.service.impl;import com.aua.museum.booking.domain.Question;import com.aua.museum.booking.domain.QuestionDetails;import com.aua.museum.booking.domain.User;import com.aua.museum.booking.exception.notfound.UserNotFoundException;import com.aua.museum.booking.repository.QuestionDetailsRepository;import com.aua.museum.booking.repository.UserRepository;import com.aua.museum.booking.service.QuestionService;import com.aua.museum.booking.service.UserService;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.BDDMockito.given;@ExtendWith(MockitoExtension.class)class QuestionDetailsServiceImplTest {    final String QUESTION_NAME = "question";    final String ANSWER = "answer";    private final String EMAIL = "jjsmith@mymail.com";    private final String USERNAME = "johnsmith";    private final String FULL_NAME = "John Smith";    private final String PASSWORD = "pass";    private final String PHONE = "+37411111111";    private final User DEFAULT_USER = User.builder()            .username(USERNAME)            .fullName(FULL_NAME)            .email(EMAIL)            .password(PASSWORD)            .phone(PHONE)            .build();    List<QuestionDetails> questionDetails = new ArrayList<>();    Question question = new Question();    QuestionDetails detail = new QuestionDetails();    private UserRepository userRepository;    private UserService userService;    private QuestionDetailsRepository questionDetailsRepository;    private QuestionDetailsServiceImpl questionDetailsService;    private QuestionService questionService;    @BeforeEach    void setup() {        userRepository = Mockito.mock(UserRepository.class);        userService = Mockito.mock(UserService.class);        questionService = Mockito.mock(QuestionService.class);        questionDetailsRepository = Mockito.mock(QuestionDetailsRepository.class);        questionDetailsService = new QuestionDetailsServiceImpl(questionDetailsRepository, userRepository, userService, questionService);        question.setDescriptionEN(QUESTION_NAME);        question.setId(1);        detail.setQuestion(question);        detail.setAnswer(ANSWER);        questionDetails.add(detail);        DEFAULT_USER.setQuestionsDetails(questionDetails);    }    @Test    void getQuestionsByUserEmail() {        given(questionDetailsRepository.getAllByUser_Email(EMAIL)).willReturn(questionDetails);        given(userRepository.existsByEmail(anyString())).willReturn(true);        List<Question> expectedSet = List.of(question);        assertEquals(expectedSet, questionDetailsService.getQuestionsByEmail(EMAIL));    }    @Test    void throwsUserNotFoundExceptionGivenNonExistingEmail() {        given(userRepository.existsByEmail(anyString())).willReturn(false);        assertThrows(UserNotFoundException.class, () -> questionDetailsService.getQuestionsByEmail(EMAIL));    }}