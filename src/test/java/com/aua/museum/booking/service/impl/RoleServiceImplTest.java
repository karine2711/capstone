package com.aua.museum.booking.service.impl;import com.aua.museum.booking.domain.Role;import com.aua.museum.booking.domain.RoleEnum;import com.aua.museum.booking.exception.notfound.RoleNotFoundException;import com.aua.museum.booking.repository.RoleRepository;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import java.util.Optional;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.ArgumentMatchers.any;import static org.mockito.BDDMockito.given;@ExtendWith(MockitoExtension.class)class RoleServiceImplTest {    private static RoleServiceImpl roleService;    private RoleRepository roleRepository;    @BeforeEach    void setup() {        roleRepository = Mockito.mock(RoleRepository.class);        roleService = new RoleServiceImpl(roleRepository);    }    @Test    void getRole() {        final RoleEnum ROLE_NAME = RoleEnum.USER_ROLE;        Role role = new Role(ROLE_NAME);        given(roleRepository.getByRoleName(any(RoleEnum.class)))                .willReturn(Optional.of(role));        assertEquals(role, roleService.getRole(ROLE_NAME));    }    @Test    void throwRoleNotFoundExceptionWhenGivenRoleDoesntExist() {        final RoleEnum ROLE_NAME = RoleEnum.USER_ROLE;        final String ROLE_NOT_FOUND_DEFAULT = "Role not found!";        final String ROLE_NOT_FOUND_ROLE = String.format("Role not found: %s", ROLE_NAME);        given(roleRepository.getByRoleName(any(RoleEnum.class)))                .willReturn(Optional.empty());        String message = assertThrows(RoleNotFoundException.class,                () -> roleService.getRole(ROLE_NAME)).getMessage();        assertTrue(message.equals(ROLE_NOT_FOUND_ROLE) || message.equals(ROLE_NOT_FOUND_DEFAULT));    }}