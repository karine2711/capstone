package com.aua.museum.booking.service.impl;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.junit.jupiter.MockitoExtension;@ExtendWith(MockitoExtension.class)public class EventServiceImplTest {/*    private EventRepository eventRepository;    private EventServiceImpl eventService;    private final long ID = 1L;    private final User USER = User.builder().username("johnsmith").fullName("John Smith")            .email("jjsmith@mymail.com").password("pass").phone("37411111111").build();    private final EventType EVENT_TYPE = new EventType();    private final LocalDate DATE = LocalDate.of(2028, 7, 7);    private final LocalTime TIME = LocalTime.of(14, 0);    private final String SCHOOL = "Shirakacy";    private final String GROUP = "10-1";    private final Event EVENT = Event.builder()            .id(ID)            .user(USER)            .eventType(EVENT_TYPE)            .date(DATE)            .time(TIME)            .school(SCHOOL)            .group(GROUP)            .build();    @BeforeEach    void setup() {        eventRepository = Mockito.mock(EventRepository.class);        eventService = new EventServiceImpl(eventRepository);    }    @Test    void createEvent() {        given(eventRepository.save(any(Event.class))).willAnswer(invocation -> invocation.getArgument(0));        Event createdEvent = eventService.createEvent(EVENT);        assertEquals(EVENT.getUser(), createdEvent.getUser());        assertEquals(EVENT, createdEvent);    }    @Test    void getEventById() {        given(eventRepository.findById(anyLong()))                .willReturn(Optional.of(EVENT));        assertEquals(EVENT, eventService.getEventById(ID));    }    @Test    void throwNotFoundWhenPassingNonExistingId() {        given(eventRepository.findById(anyLong()))                .willReturn(Optional.empty());        assertThrows(EventNotFoundException.class,                () -> eventService.getEventById(ID)).getMessage();    }    @Test    void getAllEvents() {        List<Event> list = List.of(EVENT);        given(eventRepository.findAll()).willReturn(list);        assertEquals(list, eventService.getAllEvents());    }    @Test    void getBookedEventsByDate() {        List<Event> createdEventsByDate = List.of(EVENT);        given(eventRepository.findAll().stream().filter(e -> e.getDate()                .equals(DATE)).collect(Collectors.toList()))                .willReturn(createdEventsByDate);        assertEquals(createdEventsByDate, eventService.getBookedEventsByDate(DATE));    }    @Test    void getFreeTimesByDateAndEventType() {        List<Event> createdEventsByDate = List.of(EVENT);        given(eventRepository.findAll().stream().filter(e -> e.getDate()                .equals(DATE)).collect(Collectors.toList()))                .willReturn(createdEventsByDate);        List<LocalTime> actualTimes = eventService.getFreeTimesByDateAndEventType(DATE, EVENT_TYPE);        List<LocalTime> times = DateTime.INITIAL_POSSIBLE_EVENT_TIMES                .stream().filter(t -> !(t.isAfter(TIME.minusMinutes(EVENT_TYPE.getDuration())) &&                        t.isBefore(TIME.plusMinutes(EVENT_TYPE.getDuration()))) &&                        !(t.isAfter(DateTime.LAST_POSSIBLE_EVENT_END.minusMinutes(EVENT_TYPE.getDuration())))).collect(Collectors.toList());        assertEquals(times, actualTimes);    }*/}