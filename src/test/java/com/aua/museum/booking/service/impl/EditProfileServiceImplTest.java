package com.aua.museum.booking.service.impl;import com.aua.museum.booking.domain.User;import com.aua.museum.booking.dto.UserDto;import com.aua.museum.booking.service.EditProfileService;import com.aua.museum.booking.service.QuestionService;import com.aua.museum.booking.service.UserService;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Spy;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.mock.web.MockMultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import org.springframework.web.servlet.ModelAndView;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;@SpringBootTest@ExtendWith(MockitoExtension.class)class EditProfileServiceImplTest {    private final String EMAIL = "tonyF@gmail.com";    private final String USERNAME = "tonyF";    private final String FULL_NAME = "Tony Ferguson";    private final String PASSWORD = "Tony12345";    private final String PHONE = "+37411111111";    private final Path PATH = Paths.get("src/main/resources/static/images/bg.jpg");    private final User DEFAULT_USER = User.builder()            .username(USERNAME)            .fullName(FULL_NAME)            .email(EMAIL)            .password(PASSWORD)            .phone(PHONE)            .build();    @Mock    UserService userService;    @Mock    QuestionService questionService;    @Mock    MultipartHttpServletRequest request;    @Spy    EditProfileService editProfileService;    @BeforeEach    void setup() {        editProfileService = new EditProfileServiceImpl(userService, questionService);    }    @Test    void shouldAddUserPropertiesToModel() {        given(userService.extractAvatarPicture(DEFAULT_USER)).willReturn("encodedImageInUTF-8");        ModelAndView modelWithUserAttributes = editProfileService.getModelWithUserAttributes(DEFAULT_USER);        assertNotNull(modelWithUserAttributes);        verify(userService, times(1)).extractAvatarPicture(DEFAULT_USER);        assertEquals(3, modelWithUserAttributes.getModel().size());    }    @Test    void shouldReturnNonNullUserDto() throws IOException {        byte[] bytes = Files.readAllBytes(PATH);        given(request.getParameter(anyString())).willReturn("userDtoAttribute");        given(request.getFile("profileAvatar")).willReturn(new MockMultipartFile("file", bytes));        given(request.getParameter(anyString())).willReturn(String.valueOf(4));        UserDto userDto = editProfileService.extractUserDtoFromRequest(request);        assertNotNull(userDto);        verify(request, times(14)).getParameter(anyString());        verify(request, times(1)).getFile(anyString());    }}