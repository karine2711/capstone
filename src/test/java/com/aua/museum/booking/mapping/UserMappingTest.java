package com.aua.museum.booking.mapping;import com.aua.museum.booking.domain.Role;import com.aua.museum.booking.domain.RoleEnum;import com.aua.museum.booking.domain.User;import com.aua.museum.booking.dto.QuestionDetailsDto;import com.aua.museum.booking.dto.UserDto;import com.aua.museum.booking.repository.RoleRepository;import com.aua.museum.booking.service.RoleService;import com.aua.museum.booking.service.impl.RoleServiceImpl;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import java.util.ArrayList;import java.util.List;import java.util.Optional;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import static org.mockito.BDDMockito.given;@SpringBootTestpublic class UserMappingTest {    static RoleRepository roleRepository;    static RoleService roleService;    @Autowired    private UserMapperDecorator userMapper;    @BeforeEach    public void setup() {        roleRepository = Mockito.mock(RoleRepository.class);        roleService = new RoleServiceImpl(roleRepository);        userMapper.roleService = roleService;    }    @Test    public void userRegistrationDtoToUser() {        UserDto userDto = new UserDto();        userDto.setFullName("James Smith");        userDto.setPassword("12345678");        userDto.setUsername("user012364");        userDto.setEmail("jamie.smith@hotmail.com");        userDto.setPhone("+374356985478");        QuestionDetailsDto firstQuestionDetailsDto = new QuestionDetailsDto();        firstQuestionDetailsDto.setQuestionId(1);        firstQuestionDetailsDto.setAnswer("Merchada");        QuestionDetailsDto secondQuestionDetailsDto = new QuestionDetailsDto();        secondQuestionDetailsDto.setQuestionId(5);        secondQuestionDetailsDto.setAnswer("Aso");        List<QuestionDetailsDto> questions = new ArrayList<>();        questions.add(firstQuestionDetailsDto);        questions.add(secondQuestionDetailsDto);        userDto.setQuestionsDetails(questions);        Role role = new Role();        Optional<Role> roleOptional = Optional.of(role);        given(roleRepository.getByRoleName(RoleEnum.USER_ROLE)).willReturn(roleOptional);        User user = userMapper.toEntity(userDto);        assertEquals(userDto.getFullName(), user.getFullName());        assertEquals(userDto.getPassword(), user.getPassword());        assertEquals(userDto.getUsername(), user.getUsername());        assertEquals(userDto.getEmail(), user.getEmail());        assertEquals(userDto.getPhone(), user.getPhone());        assertTrue(user.getRoles().contains(role));    }}