package com.aua.museum.booking.mapping;import com.aua.museum.booking.domain.Question;import com.aua.museum.booking.domain.QuestionDetails;import com.aua.museum.booking.dto.QuestionDetailsDto;import com.aua.museum.booking.service.impl.QuestionServiceImpl;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.junit.jupiter.MockitoExtension;import javax.validation.constraints.NotNull;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertNull;import static org.mockito.BDDMockito.given;@ExtendWith(MockitoExtension.class)class QuestionDetailsMapperImplTest {    @Mock    private static QuestionServiceImpl questionService;    private final QuestionDetailsDto questionDetailsDto = new QuestionDetailsDto();    @InjectMocks    QuestionDetailsMapperImpl questionDetailsMapper;    @BeforeEach    void setup() {        questionDetailsDto.setAnswer("Neymar");        questionDetailsDto.setQuestionId(1);    }    @Test    void toQuestionDetails() {        @NotNull Integer questionId = questionDetailsDto.getQuestionId();        Question question = new Question();        question.setDescriptionEN("Who is your favourite football player");        given(questionService.getQuestionById(questionId)).willReturn(question);        QuestionDetails questionDetails = questionDetailsMapper.toQuestionDetails(questionDetailsDto);        assertEquals(questionDetails.getQuestion(), question);        assertNull(questionDetails.getUser());        assertEquals(questionDetails.getAnswer(), questionDetailsDto.getAnswer());    }}